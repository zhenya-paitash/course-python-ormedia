# Восьмое занятие. Работа с файлами. Обработка исключений. Запросы
"""
open(file, mode='r', buffering=None, encoding=None, errors=None, newline=None, closefd=True) - Открывает файл и возвращает соответствующий поток.
'r'	открытие на чтение (является значением по умолчанию).
'w'	открытие на запись, содержимое файла удаляется, если файла не существует, создается новый.
'x'	открытие на запись, если файла не существует, иначе исключение.
'a'	открытие на дозапись, информация добавляется в конец файла.
'b'	открытие в двоичном режиме.
't'	открытие в текстовом режиме (является значением по умолчанию).
'+'	открытие на чтение и запись
"""

# такая запись сработает. только если в данной директории есть файл test.txt
file = open('test.txt')

# работает, т.к метод 'а' указывает, что файл необходимо открыть и добавить к нему запись.
# и, если файла нет, то он будет автоматически создан.
file = open('tes.txt', 'a')

# файл необоходимо закрытm командой close
file = open('tes.txt', 'a')
file.close()

# полный процесс открытия, записи и закрытия

file = open('test.txt', 'a')
file.write('some text')
file.close()

"""
Здесь получим ошибку, так, как записывать нужно строковый тип данных, если используются другие,
то позаботьтесь об их преобразовании.
Скажем [file.write(x) for x in range(10) if type(x) != str x = str(x)]
"""

file = open('test.txt', 'a')
write_lines = [file.write(x) for x in range(10)]
file.close()

file = open('test.txt', 'a')
write_lines = [file.write(str(x)) for x in range(10)]
file.close()

# запись идет в тупую,  одной строкой, посимвольно
# нужно построчно - добавьте символ перехода со строки на строку
file = open('test.txt', 'a')
write_lines = [file.write(str(x) + '\n') for x in range(10)]
file.close()

# запись обычный циклом так же работает.

file = open('test.txt', 'a')
for x in range(10):
    file.write(str(x) + '\n')
file.close()

# теперь поговорим о чтении из файла
# так мы выгрузим в память весь документ
file = open('test.txt', 'a')
file.read()

# так мы получим первый символ
file = open('test.txt', 'a')
file.read()
print(file.read(1))

# а вот так можно читать файл построчно
read_lines = [file.read(x) for x in range(10)]
print(read_lines)

for line in file:
    print(line)

"""
С помощью Python можно считывать данные из файла и записывать данные в файл. 
Чтение данных из файла означает получение доступа к этим данным. Запись данных в файл означает добавление или изменение 
данных файла.
    "r" —  открывает файл только для чтения.
    "w" —  открывает файл только для записи. Удаляет содержимое файла, если файл существует; если файл не существует, 
           создает новый файл для записи. 
    "w+" — открывает файл для чтения и записи. Удаляет содержимое файла, если файл существует; если файл не существует, 
           создает новый файл для чтения и записи.
ОШИБКИ И ИСКЛЮЧЕНИЯ
Ни в коем случае нельзя воспринимать выполнение операции, пошедшее не так, как запланировано, критической ситуацией. 
Нужно просто уметь понимать, как из этой ситуации вернуться в колею. То есть, так же использовать какую-то логику.
1. Надёжность и безотказность  для наших приложений - это основа и это не сильно запутывает код.
2. Но и каждую функцию обвешивать   обработчиками прописывая все возможные случаи тоже не стоит!

- В программе происходит сбой
- Оцениваются условия сбоя и как информация она передаётся в объект.
- Создаётся объект в памяти, который отрабатывает уже по своему

    РЕЗЮМИРУЕМ:
Если результат выполнения кода отличен от ожидаемого, то либо дело в синтаксисе, либо в условиях.
Если проблема в синтаксисе, то это – ошибка.
Если в условиях – то исключение. 
Исключение не должно прерывать программу, его нужно обработать. Это можно сделать с помощью конструкции try-except-finally 
Исключение – это объект.

    ЗАПРОСЫ:
Http – протокол передачи гипертекста
Был разработан для публикации и получения html страниц
Позволяет нам бродить по сайтам, получать данные от него и отправлять данные на него
Самый широко применяемый прикладной протокол

Протокол посылает сообщение, оно обычно состоит из 3 частей.
1) Стартовая строка – определяет тип сообщения
2)Заголовки – параметры передачи и прочее
3)Тела сообщения – данные сообщения, отделённые от заголовка одной строкой

    7 уровней модели OSI:
Физический уровень 
                        На физическом уровне данные представлены в виде электрических или оптических сигналов, 
                        соответствующие 1 и 0 бинарного потока.
Канальный уровень
                        На этом канале реализована транспортировка и прием кадров данных. 
                        Уровень реализует запросы сетевого уровня и использует физический уровень для приема и передачи. 
                        Также на этом уровне реализуется обнаружение и исправление ошибок при передаче. 
                        На канальном уровне пакет помещается в поле данных кадра — инкапсуляция. Обнаружение ошибок возможно
                        с помощью разных методов. К примеру реализация фиксированных границ кадра, или контрольной суммой
Сетевой уровень
                        На этом уровне происходит деление пользователей сети на группы. Здесь реализуется маршрутизация 
                        пакетов на основе MAC-адресов. Сетевой уровень реализует прозрачную передачу пакетов на транспортный
                        уровень. На этом уровне стираются границы сетей разных технологий. 
                        Маршрутизаторы работают на этом уровне. 
Транспортный уровень
                        На этом уровне потоки информации делятся на пакеты для передачи их на сетевом уровне. 
                        Самые распространенные протоколы этого уровня:
                            TCP — протокол управления передачей
                            NCP
                            SPX
                            TP4
Сеансовый уровень
                        На этом уровне происходит организация сеансов обмена информацией между оконечными машинами. 
                        Идет определение активной стороны и реализуется синхронизация сеанса. На практике многие протоколы 
                        других уровней включают функцию сеансового уровня.
Уровень представления
                        На этом уровне происходит обмен данными между ПО на разных ОС. Реализовано преобразование информации
                        (кодирование, сжатие и тд) для передачи потока информации на транспортный уровень. Протоколы уровня 
                        используются и те, что используют высшие уровни модели OSI.
Прикладной уровень
                        Прикладной уровень реализует доступ приложения в сеть. Уровень управляет переносом файлов и 
                        управление сетью. Используемые протоколы:
                            FTP/TFTP — протокол передачи файлов
                            X 400 — электронная почта
                            Telnet
                            smtp
                            CMIP — управление информацией
                            SNMP — управление сетью
                            NFS — сетевая файловая система
                            FTAM — метод доступа для переноса файлов
                            
    КОДЫ СОСТОЯНИЯ:

Выделено 5 классов кода состояния:
1)1xx (информационный) –    коды, информирующие о процессе передачи.
	                        Содержат только стартовую строку ответа, если требуется – несколько полей для заголовка
2)2xx(успех)           –    Сообщения информируют о случаях успешного принятия и обработки запроса.
3)3xx(перенаправление) –    Коды этого типа сообщают, что для успешного выполнения нужно сделать другой запрос.
4)4xx (Ошибка клиента) –    Ошибка со стороны клиента
5)5xx (Ошибка сервера) –    Ошибка на стороне сервера

РЕЗЮМИРУЯ:
Для соединения компьютеров в сеть, необходим набор правил, стандартизирующих подключение и передачу информации. Набор 
правил – протокол.  Протоколы есть для всех 7 уровней- от физического до абстрактных запросов. 
http-запрос это обращение в системе клиент-сервер. Определенная команда для сервера от пользователя, на которую тот 
отвечает. Типов этих команд несколько. Основные – GET, HEAD и POST. GET и HEAD – получить. POST – отправить.


"""
